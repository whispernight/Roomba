* JELLE
J - Modelo ER Openfire



J - Licencias Apache y MIT

La librería Javascript Candy, es publica bajo la licencia MIT. Esta licencia permite reutilizar el software con esta licencia tanto para ser software libre como para ser software no libre, permitiendo no liberar los cambios realizados al programa original. También nos permite licenciar cambios con licencia GPL, o cualquiera que sea compatible (es decir, que cumpla las cláusulas de distribución). Para más información ver: http://www.opensource.org/licenses/MIT

Por otro lado, nuestro servidor XMPP, Openfire, se publica bajo la licencia Apache License 2.0. Esa la licencia de software libre creada por la Apache Software Foundation (ASF). Esta licencia requiere la conservación del aviso de copyright y el disclaimer, es decir, no exige que las obras derivadas (versiones modificadas) del software se distribuyan usando la misma licencia, ni siquiera que se tengan que distribuir como software libre/open source. La Licencia Apache sólo exige que se mantenga una noticia que informe a los receptores que en la distribución se ha usado código con la Licencia Apache. Para más información ver: http://www.opensource.org/licenses/Apache-2.0

Por nuestra parte, hemos decidido también distribuir nuestro proyecto bajo esta última licencia. Hemos optado por esta licencia ya que nos resulta más flexible que la licencia MIT o la famosa GPL, Licencia Pública de GNU. 

J - Licencias de los contenidos

Dado que se trata de un chat anónimo y de libre acceso para cualquier persona con una conexión de a internet (en caso de censura, no será por nuestra parte) no hemos considerado necesarias licencias o protecciones que superen el sentido común que debería aplicar cualquier persona que navega por internet. 

J - Faceta 2.0

Hemos decidido introducir una pequeña faceta social o web 2.0 en la página de Roomba. Visualmente se reduce a un área en el header que permite compartir un enlace con la sala del chat en las redes sociales Facebook, Twitter y Google+. La ventaja que ofrece esta faceta es que permite al usuario un enlace con sus contacto para reunirlos a todos en la misma sala para debatir sobre un tema en concreto, por ejemplo un partido de fútbol que se está disputando. Sin intenciones de reinventar la "rueda" optamos por usar un iframe facilitado por www.addthis.com, sitio web dedicado a ofrecer iframe con diversos diseños y códigos para compartir sitios web. 

Dentro de nuestros propósitos de adaptar nuestro proyecto a las tendencias sociales de internet y nuevos dispositivos, decidimos incluir también un código QR con el enlace de la sala. Esto facilita la compartición de estos enlaces cuando se dispone de un dispositivo móvil. El código QR lo obtenemos gracias a las APIs de Google (http://code.google.com/apis/chart/).

J - Paypal

Nuestro proyecto cuenta con un sistema de donaciones mediante PayPal. Para oferecer esta opción nos beneficiamos del servicio de PayPal (https://www.paypal.com/es/cgi-bin/webscr?cmd=_donate-intro-outside) que genera un código Javascript a insertar en la página web siguendo unos simples pasos. Para realizar una donación únicamente debe seguir el enlace del botón de donación en el header, siéntase libre de usarlo. 

J - Github (Sourceforge?)

En lugar de usar Sourceforge, decidimos utilizar Github por lo maravilloso que nos resulta el controlador de versiones Git y aprovechar nuestras cuentas ya creadas en esta comunidad. El proyecto está disponible en github.com/detaeye/candy

J - Ha sido usado en Leben!

Durante la fase de pruebas del proyecto, tuvimos la oportunidad de facilitar los servicios de Roomba a la empresa Grupo Leben. Esta empresa tenía la necesidad de establecer una servicio de comunicación entre todo un equipo de Marketing (5 personas) y otra persona residente en Brasíl. La poca disciplina del servicio de mensajería instantánea de Microsoft Messenger y las quejas sobre la lentitud de Skype por parte del equipo, nos impulsó proponer Roomba como una alternativa ligera y efectiva. La experiencia resultó todo un éxito, nos permitió adaptar ciertos aspectos de la interfaz y corregir varios fallos que aún no habíamos lozalizado. Por su parte el equipo de Marketing quedó satisfecho con la alternativa. Elogiaron la sencillez y fluidez de Roomba. 


J - Explicar CMS Openfire

Gran parte del funcionamiento de nuestro proyecto se debe al servidor de mensajería con el que se comunica nuestra versión adaptada del chat realizado en Javascript. Para ello hemos utilizado Openfire.
Openfire es un sistema de mensajeria instantánea GPL programado en el lenguaje java. Funciona mediante el protocolo XMPP y te permite tener tu propio servidor de mensajeria con el que puedes administrar a tus usuarios, compartir archivos, auditar mensajes, mensajes offline, mensajes broadcast, grupos, etc.

Más información sobre Openfire: http://www.igniterealtime.org/projects/openfire

Para hacer funcionar Openfire necesitábamos una máquina con conexión a internet. Openfire tiene la gran ventaja de ser multiplataforma (Windows, Linux, MacOS) pero nuestra intención era utilizar la misma máquina que pudiése servir después como servidor web y más. Para ello utilizamos una máquina 'olvidada' de unos de los integrantes del grupo. Se trata de un servidor con 1015MB de memoria RAM y un procesador AMD Athlon de 32 bits con una frecuencia de 1550MHz. Por comodidad utilizamos la distribución Ubuntu de GNU/Linux. Optamos por la última versión LTS (Long Term Support), es decir, la 10.04 (lucid). 

Cómo servidor web hemos optado por servidor HTTP Apache versión 2.0 junto con la versión PHP 5.0 y MySQL como sistema de gestión para las bases de datos. Con estas herramientas bien configuradas ya teníamos un entorno LAMP para desarrollar y poner en ejecucción nuestro proyecto. 

Más información sobre Apache: http://httpd.apache.org/
Más información sobre PHP: http://www.php.net/
Más información sobre MySQL: http://www.mysql.com/

J - Cambios realizados en Openfire

Nos encontramos con un obstáculo en el servidor Openfire. Resulta que por algún motivo nuestra librería Javascript no le indicaba al servidor que una vez creado una sala de chat la aprobara (Openfire por defecto pide que alguien confirma las comunicaciones). Debido a que nuestro objetivo en el proyecto es que todo fuera sencillo y golpe de dos clicks decidimos que lo mejor sería modificar el código fuente del servidor. Para ello editamos la clase '' indicando que por defecto las clases debían aprobarse. Tras recompilar el servidor (no sin algunas complicaciones) todo funcionó como queríamos.

J - Bibliografia




== HECHO ==
F - Explicar protocolo XMPP (XML)
F - Mustache
F - Validacion W3C
F - AJAX
F - Sesiones (Cookies y Openfire)
F - Roles (4)
- Usuario normal
- Moderador chat
- Administrador Openfire
- Administrador de la máquina
F - Bibliografia

